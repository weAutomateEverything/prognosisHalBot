// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/weAutomateEverything/prognosisHalBot/models"
)

// SendTextAlertReader is a Reader for the SendTextAlert structure.
type SendTextAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendTextAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendTextAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewSendTextAlertDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSendTextAlertOK creates a SendTextAlertOK with default headers values
func NewSendTextAlertOK() *SendTextAlertOK {
	return &SendTextAlertOK{}
}

/*SendTextAlertOK handles this case with default header values.

Message Sent successfully
*/
type SendTextAlertOK struct {
}

func (o *SendTextAlertOK) Error() string {
	return fmt.Sprintf("[POST /api//alert/{chatid}][%d] sendTextAlertOK ", 200)
}

func (o *SendTextAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendTextAlertDefault creates a SendTextAlertDefault with default headers values
func NewSendTextAlertDefault(code int) *SendTextAlertDefault {
	return &SendTextAlertDefault{
		_statusCode: code,
	}
}

/*SendTextAlertDefault handles this case with default header values.

unexpected error
*/
type SendTextAlertDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the send text alert default response
func (o *SendTextAlertDefault) Code() int {
	return o._statusCode
}

func (o *SendTextAlertDefault) Error() string {
	return fmt.Sprintf("[POST /api//alert/{chatid}][%d] sendTextAlert default  %+v", o._statusCode, o.Payload)
}

func (o *SendTextAlertDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
