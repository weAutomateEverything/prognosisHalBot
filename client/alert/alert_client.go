// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new alert API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for alert API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
SendDocumentAlert Send a text alert to a telegram group
*/
func (a *Client) SendDocumentAlert(params *SendDocumentAlertParams) (*SendDocumentAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendDocumentAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendDocumentAlert",
		Method:             "POST",
		PathPattern:        "/api/alert/{chatid}/document/{extension}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendDocumentAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendDocumentAlertOK), nil

}

/*
SendImageAlert Send a image to a telegram group
*/
func (a *Client) SendImageAlert(params *SendImageAlertParams) (*SendImageAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendImageAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendImageAlert",
		Method:             "POST",
		PathPattern:        "/api/alert/{chatid}/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendImageAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendImageAlertOK), nil

}

/*
SendTextAlert Send a text alert to a telegram group
*/
func (a *Client) SendTextAlert(params *SendTextAlertParams) (*SendTextAlertOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSendTextAlertParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "sendTextAlert",
		Method:             "POST",
		PathPattern:        "/api//alert/{chatid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SendTextAlertReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SendTextAlertOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
