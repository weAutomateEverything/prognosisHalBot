// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSendTextAlertParams creates a new SendTextAlertParams object
// with the default values initialized.
func NewSendTextAlertParams() *SendTextAlertParams {
	var ()
	return &SendTextAlertParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSendTextAlertParamsWithTimeout creates a new SendTextAlertParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSendTextAlertParamsWithTimeout(timeout time.Duration) *SendTextAlertParams {
	var ()
	return &SendTextAlertParams{

		timeout: timeout,
	}
}

// NewSendTextAlertParamsWithContext creates a new SendTextAlertParams object
// with the default values initialized, and the ability to set a context for a request
func NewSendTextAlertParamsWithContext(ctx context.Context) *SendTextAlertParams {
	var ()
	return &SendTextAlertParams{

		Context: ctx,
	}
}

// NewSendTextAlertParamsWithHTTPClient creates a new SendTextAlertParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSendTextAlertParamsWithHTTPClient(client *http.Client) *SendTextAlertParams {
	var ()
	return &SendTextAlertParams{
		HTTPClient: client,
	}
}

/*SendTextAlertParams contains all the parameters to send to the API endpoint
for the send text alert operation typically these are written to a http.Request
*/
type SendTextAlertParams struct {

	/*Chatid
	  chat id

	*/
	Chatid int64
	/*Message
	  message you want to send

	*/
	Message *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the send text alert params
func (o *SendTextAlertParams) WithTimeout(timeout time.Duration) *SendTextAlertParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the send text alert params
func (o *SendTextAlertParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the send text alert params
func (o *SendTextAlertParams) WithContext(ctx context.Context) *SendTextAlertParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the send text alert params
func (o *SendTextAlertParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the send text alert params
func (o *SendTextAlertParams) WithHTTPClient(client *http.Client) *SendTextAlertParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the send text alert params
func (o *SendTextAlertParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatid adds the chatid to the send text alert params
func (o *SendTextAlertParams) WithChatid(chatid int64) *SendTextAlertParams {
	o.SetChatid(chatid)
	return o
}

// SetChatid adds the chatid to the send text alert params
func (o *SendTextAlertParams) SetChatid(chatid int64) {
	o.Chatid = chatid
}

// WithMessage adds the message to the send text alert params
func (o *SendTextAlertParams) WithMessage(message *string) *SendTextAlertParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the send text alert params
func (o *SendTextAlertParams) SetMessage(message *string) {
	o.Message = message
}

// WriteToRequest writes these params to a swagger request
func (o *SendTextAlertParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param chatid
	if err := r.SetPathParam("chatid", swag.FormatInt64(o.Chatid)); err != nil {
		return err
	}

	if o.Message != nil {
		if err := r.SetBodyParam(o.Message); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
