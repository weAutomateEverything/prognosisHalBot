// Code generated by go-swagger; DO NOT EDIT.

package alert

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/weAutomateEverything/prognosisHalBot/models"
)

// SendDocumentAlertReader is a Reader for the SendDocumentAlert structure.
type SendDocumentAlertReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendDocumentAlertReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendDocumentAlertOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewSendDocumentAlertDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSendDocumentAlertOK creates a SendDocumentAlertOK with default headers values
func NewSendDocumentAlertOK() *SendDocumentAlertOK {
	return &SendDocumentAlertOK{}
}

/*SendDocumentAlertOK handles this case with default header values.

Message Sent successfully
*/
type SendDocumentAlertOK struct {
}

func (o *SendDocumentAlertOK) Error() string {
	return fmt.Sprintf("[POST /api/alert/{chatid}/document/{extension}][%d] sendDocumentAlertOK ", 200)
}

func (o *SendDocumentAlertOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSendDocumentAlertDefault creates a SendDocumentAlertDefault with default headers values
func NewSendDocumentAlertDefault(code int) *SendDocumentAlertDefault {
	return &SendDocumentAlertDefault{
		_statusCode: code,
	}
}

/*SendDocumentAlertDefault handles this case with default header values.

unexpected error
*/
type SendDocumentAlertDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the send document alert default response
func (o *SendDocumentAlertDefault) Code() int {
	return o._statusCode
}

func (o *SendDocumentAlertDefault) Error() string {
	return fmt.Sprintf("[POST /api/alert/{chatid}/document/{extension}][%d] sendDocumentAlert default  %+v", o._statusCode, o.Payload)
}

func (o *SendDocumentAlertDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
